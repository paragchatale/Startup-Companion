import { createClient } from 'npm:@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
};

interface RequestBody {
  responseId: string;
  title?: string;
}

// Simple HTML to PDF conversion using Puppeteer-like approach
// For production, consider using a dedicated PDF service
const generatePDFContent = (title: string, userMessage: string, aiResponse: string, userName: string, botType: string) => {
  const currentDate = new Date().toLocaleDateString();
  
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${title}</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            text-align: center;
            border-bottom: 2px solid #3b82f6;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .header h1 {
            color: #3b82f6;
            margin: 0;
        }
        .header p {
            color: #666;
            margin: 5px 0;
        }
        .section {
            margin-bottom: 25px;
            padding: 20px;
            border-left: 4px solid #3b82f6;
            background-color: #f8fafc;
        }
        .section h2 {
            color: #1e40af;
            margin-top: 0;
        }
        .question {
            background-color: #e0f2fe;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
        }
        .response {
            background-color: #f0f9ff;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #0ea5e9;
        }
        .footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
            color: #666;
            font-size: 12px;
        }
        .bot-type {
            display: inline-block;
            background-color: #3b82f6;
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Start-up Companion</h1>
        <p>AI-Powered Business Advisory Session</p>
        <p><span class="bot-type">${botType.replace('_', ' ')}</span></p>
        <p>Generated on: ${currentDate}</p>
        <p>For: ${userName}</p>
    </div>

    <div class="section">
        <h2>Session Summary</h2>
        <p><strong>Title:</strong> ${title}</p>
        <p><strong>Advisory Type:</strong> ${botType.replace('_', ' ').toUpperCase()}</p>
        <p><strong>Date:</strong> ${currentDate}</p>
    </div>

    <div class="section">
        <h2>Your Question</h2>
        <div class="question">
            ${userMessage}
        </div>
    </div>

    <div class="section">
        <h2>AI Response</h2>
        <div class="response">
            ${aiResponse.replace(/\n/g, '<br>')}
        </div>
    </div>

    <div class="footer">
        <p>This document was generated by Start-up Companion AI Advisory Platform</p>
        <p>For more information, visit our platform or contact our support team</p>
        <p><strong>Disclaimer:</strong> This AI-generated advice is for informational purposes only. 
        Please consult with qualified professionals for specific legal, financial, or business decisions.</p>
    </div>
</body>
</html>`;
};

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Get user from JWT
    const authHeader = req.headers.get('Authorization')!;
    const token = authHeader.replace('Bearer ', '');
    const { data: { user }, error: authError } = await supabase.auth.getUser(token);

    if (authError || !user) {
      return new Response(
        JSON.stringify({ error: 'Unauthorized' }),
        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const { responseId, title }: RequestBody = await req.json();

    // Fetch the AI response
    const { data: aiResponseData, error: fetchError } = await supabase
      .from('ai_responses')
      .select('*')
      .eq('id', responseId)
      .eq('user_id', user.id)
      .single();

    if (fetchError || !aiResponseData) {
      return new Response(
        JSON.stringify({ error: 'AI response not found' }),
        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Get user details for the PDF
    const { data: userDetails } = await supabase
      .from('user_details')
      .select('full_name')
      .eq('id', user.id)
      .single();

    const userName = userDetails?.full_name || 'Startup Founder';
    const pdfTitle = title || `${aiResponseData.bot_type.replace('_', ' ')} Advisory Session`;

    // Generate HTML content
    const htmlContent = generatePDFContent(
      pdfTitle,
      aiResponseData.user_message,
      aiResponseData.ai_response,
      userName,
      aiResponseData.bot_type
    );

    // For this example, we'll use a simple HTML-to-PDF conversion
    // In production, you might want to use Puppeteer or a dedicated PDF service
    
    // Create a simple PDF-like response (HTML content that can be saved as PDF by browser)
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const fileName = `${aiResponseData.bot_type}_response_${timestamp}.html`;
    const filePath = `${user.id}/${fileName}`;

    // Upload HTML content to storage (can be converted to PDF by frontend)
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('ai-response-docs')
      .upload(filePath, new Blob([htmlContent], { type: 'text/html' }), {
        contentType: 'text/html',
        upsert: true
      });

    if (uploadError) {
      throw new Error(`Failed to upload PDF: ${uploadError.message}`);
    }

    // Get public URL
    const { data: urlData } = supabase.storage
      .from('ai-response-docs')
      .getPublicUrl(filePath);

    // Update the AI response record
    const { error: updateError } = await supabase
      .from('ai_responses')
      .update({
        pdf_generated: true,
        pdf_url: urlData.publicUrl,
        is_satisfied: true
      })
      .eq('id', responseId);

    if (updateError) {
      console.error('Failed to update AI response:', updateError);
    }

    return new Response(
      JSON.stringify({
        success: true,
        pdfUrl: urlData.publicUrl,
        fileName: fileName,
        message: 'PDF generated successfully'
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('PDF generation error:', error);
    return new Response(
      JSON.stringify({ error: 'Failed to generate PDF' }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});