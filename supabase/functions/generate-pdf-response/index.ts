import { createClient } from 'npm:@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
};

interface RequestBody {
  conversationText: string;
  title?: string;
  sessionId?: string;
}

// Generate HTML content for PDF
const generatePDFContent = (title: string, conversationText: string, userName: string) => {
  const currentDate = new Date().toLocaleDateString();
  
  return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>${title}</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            text-align: center;
            border-bottom: 2px solid #3b82f6;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .header h1 {
            color: #3b82f6;
            margin: 0;
        }
        .header p {
            color: #666;
            margin: 5px 0;
        }
        .conversation {
            background-color: #f8fafc;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .conversation h2 {
            color: #1e40af;
            margin-top: 0;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 8px;
        }
        .user-message {
            background-color: #e0f2fe;
            border-left: 4px solid #0ea5e9;
        }
        .ai-message {
            background-color: #f0f9ff;
            border-left: 4px solid #3b82f6;
        }
        .footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
            color: #666;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Start-up Companion</h1>
        <p>AI-Powered Business Advisory Session</p>
        <p>Generated on: ${currentDate}</p>
        <p>For: ${userName}</p>
    </div>

    <div class="conversation">
        <h2>Conversation Summary</h2>
        <div class="conversation-content">
            ${conversationText.split('\n\n').map(line => {
              if (line.startsWith('You:')) {
                return `<div class="message user-message"><strong>You:</strong> ${line.substring(4)}</div>`;
              } else if (line.startsWith('AI Assistant:')) {
                return `<div class="message ai-message"><strong>AI Assistant:</strong> ${line.substring(13)}</div>`;
              }
              return `<div class="message">${line}</div>`;
            }).join('')}
        </div>
    </div>

    <div class="footer">
        <p>This document was generated by Start-up Companion AI Advisory Platform</p>
        <p>For more information, visit our platform or contact our support team</p>
        <p><strong>Disclaimer:</strong> This AI-generated advice is for informational purposes only. 
        Please consult with qualified professionals for specific legal, financial, or business decisions.</p>
    </div>
</body>
</html>`;
};

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Get user from JWT
    const authHeader = req.headers.get('Authorization')!;
    const token = authHeader.replace('Bearer ', '');
    const { data: { user }, error: authError } = await supabase.auth.getUser(token);

    if (authError || !user) {
      return new Response(
        JSON.stringify({ error: 'Unauthorized' }),
        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const { conversationText, title, sessionId }: RequestBody = await req.json();

    // Get user details for the PDF
    const { data: userDetails } = await supabase
      .from('user_details')
      .select('full_name')
      .eq('id', user.id)
      .maybeSingle();

    const userName = userDetails?.full_name || 'Startup Founder';
    const pdfTitle = title || 'Dashboard Conversation';

    // Generate HTML content
    const htmlContent = generatePDFContent(pdfTitle, conversationText, userName);

    // Create filename
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const fileName = `dashboard_conversation_${timestamp}.html`;
    const filePath = `${user.id}/${fileName}`;

    // Upload HTML content to storage
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('ai-response-docs')
      .upload(filePath, new Blob([htmlContent], { type: 'text/html' }), {
        contentType: 'text/html',
        upsert: true
      });

    if (uploadError) {
      console.error('Upload error:', uploadError);
      throw new Error(`Failed to upload PDF: ${uploadError.message}`);
    }

    // Get public URL
    const { data: urlData } = supabase.storage
      .from('ai-response-docs')
      .getPublicUrl(filePath);

    // Create session if not provided
    let currentSessionId = sessionId;
    if (!currentSessionId) {
      const { data: newSession } = await supabase
        .from('chat_sessions')
        .insert({
          user_id: user.id,
          session_type: 'dashboard_save',
          title: pdfTitle
        })
        .select()
        .single();
      currentSessionId = newSession?.id;
    }

    // Store the response record
    const { data: responseRecord } = await supabase
      .from('ai_responses')
      .insert({
        user_id: user.id,
        session_id: currentSessionId,
        bot_type: 'conversation_save',
        user_message: 'Save conversation as PDF',
        ai_response: 'Conversation saved successfully',
        pdf_generated: true,
        pdf_url: urlData.publicUrl,
        is_satisfied: true
      })
      .select()
      .single();

    return new Response(
      JSON.stringify({
        success: true,
        pdfUrl: urlData.publicUrl,
        fileName: fileName,
        message: 'Conversation saved successfully',
        responseId: responseRecord?.id
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('PDF generation error:', error);
    return new Response(
      JSON.stringify({ error: 'Failed to save conversation' }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});